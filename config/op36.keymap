#include "keys_ru.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&mt {
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
    require-prior-idle-ms = <125>;
};

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        kha {
            bindings = <&kp LBKT>;
            key-positions = <6 7>;
        };

        hrdsgn {
            bindings = <&kp RBKT>;
            key-positions = <7 8>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        en {
            bindings = <
  &none  &kp W              &kp F                &kp P                &kp B                                   &kp Z            &kp L                 &kp U                 &kp Y               &none
  &kp A  &hml LEFT_SHIFT R  &hml LEFT_CONTROL S  &hml LEFT_COMMAND T  &kp G                                   &kp M            &hmr RIGHT_COMMAND N  &hmr RIGHT_CONTROL E  &hmr RIGHT_SHIFT I  &kp O
  &none  &kp X              &kp C                &hml LEFT_ALT D      &kp V                                   &kp K            &hmr RIGHT_ALT H      &kp J                 &kp Q               &none
                                                 &to 0                &lt 1 SPACE  &lt 6 ESCAPE    &kp ENTER  &lt 5 BACKSPACE  &to 2
            >;
        };

        en_symbols {
            bindings = <
  &trans  &trans  &kp LG(TAB)  &trans  &trans                    &kp QUESTION  &kp LEFT_BRACKET  &kp MINUS  &kp RIGHT_BRACKET  &trans
  &trans  &trans  &trans       &trans  &trans                    &kp FSLH      &kp COLON         &kp PLUS   &kp SEMI           &kp EQUAL
  &trans  &trans  &trans       &trans  &trans                    &kp DOLLAR    &kp COMMA         &kp DOT    &kp BSLH           &trans
                               &trans  &trans  &trans    &trans  &trans        &trans
            >;
        };

        ru {
            bindings = <
  &none  &kp Q              &kp E                &kp R                &kp T                                &kp Y            &kp U                 &kp I                 &kp P               &none
  &kp Z  &hml LEFT_SHIFT S  &hml LEFT_CONTROL D  &hml LEFT_COMMAND F  &kp G                                &kp H            &hmr RIGHT_COMMAND J  &hmr RIGHT_CONTROL K  &hmr RIGHT_SHIFT L  &kp SEMI
  &none  &kp X              &kp C                &lt 3 V              &kp B                                &kp N            &lt 3 M               &kp COMMA             &kp DOT             &none
                                                 &to 0                &lt 4 SPACE  &lt 6 ESC    &kp ENTER  &lt 5 BACKSPACE  &to 2
            >;
        };

        ruext {
            bindings = <
  &trans  &kp W   &trans  &trans  &kp BSLH                    &trans  &trans             &kp O   &kp SINGLE_QUOTE  &trans
  &kp A   &trans  &trans  &trans  &trans                      &trans  &trans             &trans  &kp LEFT_BRACKET  &trans
  &trans  &trans  &trans  &trans  &trans                      &trans  &kp RIGHT_BRACKET  &trans  &trans            &trans
                          &trans  &trans    &trans    &trans  &trans  &trans
            >;
        };

        ru_symbols {
            bindings = <
  &trans  &trans  &kp LG(TAB)  &trans  &trans                    &kp QUESTION      &none             &kp MINUS         &none             &none
  &trans  &trans  &trans       &trans  &trans                    &kp FSLH          &kp LS(NUMBER_5)  &kp PLUS          &kp LS(NUMBER_8)  &kp EQUAL
  &trans  &trans  &trans       &trans  &trans                    &kp LA(NUMBER_4)  &kp LS(NUMBER_6)  &kp LS(NUMBER_7)  &none             &none
                               &trans  &trans  &trans    &trans  &trans            &trans
            >;
        };

        nav {
            bindings = <
  &trans  &kp LG(LEFT_BRACKET)  &kp UP_ARROW    &kp LG(RIGHT_BRACKET)  &trans                     &trans  &trans  &trans  &trans  &trans
  &trans  &kp LEFT_ARROW        &kp DOWN_ARROW  &kp RIGHT_ARROW        &kp TAB                    &trans  &trans  &trans  &trans  &trans
  &trans  &trans                &trans          &trans                 &trans                     &trans  &trans  &trans  &trans  &trans
                                                &trans                 &trans   &trans    &trans  &trans  &trans
            >;
        };

        numbers {
            bindings = <
  &trans  &trans  &trans  &trans  &trans                    &trans        &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &trans
  &trans  &trans  &trans  &trans  &trans                    &kp NUMBER_0  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp EQUAL
  &trans  &trans  &trans  &trans  &trans                    &trans        &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans
                          &trans  &trans  &trans    &trans  &trans        &trans
            >;
        };

        adj {
            bindings = <
  &bootloader  &kp F1        &kp F2         &kp F3         &kp F4                     &bt BT_SEL 0  &bt BT_SEL 1         &bt BT_SEL 2       &bt BT_SEL 3        &bt BT_CLR
  &kp LGUI     &hml LALT F5  &hml LSHFT F6  &hml LCTRL F7  &kp F8                     &out OUT_BLE  &hmr RCTRL C_VOL_DN  &hmr RSHFT C_MUTE  &hmr LALT C_VOL_UP  &kp RGUI
  &none        &kp F9        &kp F10        &kp F11        &kp F12                    &out OUT_USB  &kp C_PREV           &kp C_PP           &kp C_NEXT          &studio_unlock
                                            &trans         &trans   &trans    &trans  &trans        &trans
            >;
        };
    };
};
